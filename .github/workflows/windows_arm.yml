name: Windows ARM

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: [arm]

    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg.exe install tbb --triplet=arm64-windows
        echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
        echo "CMAKE_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Update vcpkg
      run: |
        .\vcpkg\vcpkg.exe update
        .\vcpkg\vcpkg.exe upgrade --no-dry-run
  
    - name: Verify vcpkg ports
      run: |
        .\vcpkg\vcpkg.exe search cmake
        .\vcpkg\vcpkg.exe search gtest
        .\vcpkg\vcpkg.exe search tbb

    - name: Install cmake and gtest
      run: |
        .\vcpkg\vcpkg.exe install cmake:arm64-windows gtest:arm64-windows
        .\vcpkg\vcpkg.exe integrate install
    
    - name: Install TBB
      run: |
        .\vcpkg\vcpkg.exe install tbb:arm64-windows
        .\vcpkg\vcpkg.exe integrate install

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@v3.21.1

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Check MSVC Version
      run: |
        try {
          $versionOutput = cl 2>&1
          $match = $versionOutput | Select-String -Pattern "Version (\d+\.\d+)"
          
          if ($match) {
              $version = [Version]$match.Matches.Groups[1].Value
              Write-Output "MSVC version found: $version"

              # Check if version is less than 19.28
              if ($version -lt [Version]"19.28") {
                  throw "MSVC version is less than 19.28"
              }
          } else {
              Write-Output "MSVC version could not be determined. Skipping version check."
              echo "::set-output name=skip_step::true"
          }
        } catch {
          throw $_
        }
      shell: pwsh
      id: check_msvc

    - name: Create build directory
      if: steps.check_msvc.outputs.skip_step != 'true'
      run: mkdir build

    - name: Verify vcpkg Installation
      run: .\vcpkg\vcpkg.exe list

    - name: Configure CMake
      if: steps.check_msvc.outputs.skip_step != 'true'
      run: |
        echo "CMAKE_TOOLCHAIN_FILE is: $env:CMAKE_TOOLCHAIN_FILE"
        cmake -S . -B build -DBUILD_CIRCULARBUFFER_MULTI_THREADING=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: List build directory contents
      run: ls -R build/
      
    - name: Build
      run: cmake --build build --config Release --verbose

    - name: Test with Retry
      shell: pwsh
      run: |
        $max_retries = 10
        $attempt = 1
        while ($attempt -le $max_retries) {
          Write-Output "Test attempt $attempt"
          ctest --output-on-failure -C Release
          if ($LASTEXITCODE -eq 0) {
            Write-Output "Tests passed on attempt $attempt"
            exit 0
          } else {
            Write-Output "Tests failed on attempt $attempt"
          }
          $attempt++
          Start-Sleep -Seconds 1
        }
        Write-Output "All $max_retries attempts failed"
        exit 1
      working-directory: build